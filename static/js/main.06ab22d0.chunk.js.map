{"version":3,"sources":["ErrorMessage.js","Weather.js","Title.js","App.js","serviceWorker.js","index.js"],"names":["ErrorMessage","props","message","react_default","a","createElement","Weather","weatherData","_weatherData$weather$","weather","main","description","_weatherData$main","temp","pressure","humidity","temp_min","temp_max","_weatherData$wind","wind","speed","deg","className","Math","round","Title","Component","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","inputValue","e","_this2","preventDefault","zip","url","concat","process","fetch","then","res","json","console","log","setState","catch","err","cod","src_ErrorMessage","src_Weather","_this3","src_Title","renderWeather","onSubmit","handleSubmit","value","onChange","target","type","pattern","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.06ab22d0.chunk.js","sourcesContent":["import React from 'react';\n\nfunction ErrorMessage(props) {\n  const { message } = props;\n  return <h1>{message}</h1>;\n}\n\nexport default ErrorMessage;\n","import React from 'react';\nfunction Weather(props) {\n\n  const { weatherData } = props;\n  const { main, description } = weatherData.weather[0];\n  const { temp, pressure, humidity, temp_min, temp_max } = weatherData.main;\n  const { speed, deg } = weatherData.wind\n  return (\n    <div>\n      <div className=\"weather\"><span className=\"bold\">Condition:</span> {main} </div>\n      <div className=\"weather\"><span className=\"bold\">Details:</span>   {description}</div>\n      <div className=\"weather\"><span className=\"bold\">Temperature:</span>   {Math.round(temp)} °F </div>\n      <div className=\"weather\"><span className=\"bold\">Min Temp:</span>  {temp_max} {Math.round.temp_min} °F </div>\n      <div className=\"weather\"><span className=\"bold\">Max Temp:</span>  {temp_min} °F </div>\n      <div className=\"weather\"><span className=\"bold\">Pressure: </span>   {pressure} hPa</div>\n      <div className=\"weather\"><span className=\"bold\">Humidity: </span>  {humidity} %</div>\n      <div className=\"weather\"><span className=\"bold\">Wind Speed: </span>  {speed} mph</div>\n      <div className=\"weather\"><span className=\"bold\"> Wind Direction:  </span>  {deg} deg</div>\n\n    </div>\n  );\n}\n\nexport default Weather;\n","import React, { Component } from 'react';\n\nclass Title extends Component {\n  render() {\n    return (\n      <div className='title'>\n        <h1>\n          WHAT'S THE WEATHER\n        </h1>\n        <h2>Enter Your Zip Below</h2>\n      </div>\n    );\n  }\n}\n\nexport default Title;\n","\nimport React, { Component } from 'react';\nimport ErrorMessage from './ErrorMessage';\nimport Weather from './Weather';\nimport './App.css';\nimport Title from './Title';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      inputValue: '', // Holds value entered in input field\n      weatherData: null, // Holds data loaded from the weather API\n    };\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    const { inputValue: zip } = this.state;\n    // ! My own API key!\n    const apikey = process.env.REACT_APP_OPENWEATHERMAP_API_KEY;\n    // Form an API request URL with the apikey and zip\n    const url = `https://api.openweathermap.org/data/2.5/weather?zip=${zip},us&appid=${apikey}&units=imperial`;\n\n    // Get data from the API with fetch\n    fetch(url).then((res) => {\n      // Handle the response stream as JSON\n      return res.json();\n    }).then((json) => {\n      // If the request successful, assign data to component state\n      console.log(json)\n      this.setState({ weatherData: json });\n      // This needs better error checking here or at renderWeather()\n      // It's possible to get a valid JSON response that is not weather\n    }).catch((err) => {\n      // If there is no data...\n      this.setState({ weatherData: null });\n      // Clear the weather data, nothing to display\n      console.log('-- Error fetching --');\n      console.log(err.message);\n    });\n  }\n\n  renderWeather() {\n    // This method returns undefined or a JSX component\n    const { weatherData } = this.state;\n    if (weatherData === null) {\n      // If there is no data return undefined\n      return null;\n    }\n\n    if (weatherData.cod === '404') {\n      return <ErrorMessage message={weatherData.message} />;\n    }\n\n    if (weatherData.cod === '400') {\n      return <ErrorMessage message={weatherData.message} />;\n\n    }\n\n    /*\n    This next step needs another level of error checking. It's\n    possible to get a JSON response for an invalid zip in which\n    case the step below fails.\n    */\n    return <Weather weatherData={weatherData} />;\n  }\n\n  render() {\n    const { inputValue } = this.state;\n    return (\n      <div className=\"App\">\n\n        <div>\n          <Title />\n        </div>\n\n        <div className=\"return_weather\">\n          {/** Conditionally render this component */}\n          {this.renderWeather()}\n        </div>\n\n\n        {/** This input uses the controlled component pattern */}\n        <form onSubmit={e => this.handleSubmit(e)}>\n\n          {/**\n          This pattern is used for input and other form elements\n          Set the value of the input to a value held in component state\n          Set the value held in component state when a change occurs at the input\n          */}\n          <div className=\"form-elements\">\n            <input\n              value={inputValue}\n              onChange={e => this.setState({ inputValue: e.target.value })}\n              type=\"text\"\n              pattern=\"(\\d{5}([\\-]\\d{4})?)\"\n              placeholder=\"zip code\"\n            />\n\n            <button className=\"button\" type=\"submit\">submit</button>\n          </div>\n        </form>\n\n      </div >\n    );\n  }\n}\n\nexport default App;\n\n\n// 1 == 1 true SAME VALUE\n// 1 == '1' true SAME VALUE\n\n// 1 === '1' false SAME VLUE AND TYPE","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './App.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change unregister() to register() below. Note this comes with some pitfalls. Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}